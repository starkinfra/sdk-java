package com.starkinfra;

import com.starkinfra.utils.Generator;
import com.starkinfra.utils.Resource;
import com.starkinfra.utils.Rest;
import com.starkinfra.utils.SubResource;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public final class IssuingCard extends Resource {
    /**
     * IssuingCard object
     * <p>
     * The IssuingCard object displays the information of the cards created in your Workspace.
     * Sensitive information will only be returned when the "expand" parameter is used, to avoid security concerns.
     * <p>
     * Parameters:
     * holderName        [string]: card holder name. ex: "Tony Stark"
     * holderTaxId       [string]: card holder tax ID. ex: "012.345.678-90"
     * holderExternalId  [string]: card holder unique id, generated by the user to avoid duplicated holders. ex: "my-entity/123"
     * displayName       [string, default ""]: card displayed name. ex: "ANTHONY STARK"
     * rules             [list of IssuingRule or HashMap, default []]: [EXPANDABLE] list of card spending rules.
     * binId             [string, default random]: BIN ID to which the card is bound. ex: "53810200"
     * tags              [list of strings]: list of strings for tagging. ex: ["travel", "food"]
     * streetLine1       [string, default sub-issuer street line 1]: card holder main address. ex: "Av. Paulista, 200"
     * streetLine2       [string, default sub-issuer street line 2]: card holder address complement. ex: "Apto. 123"
     * district          [string, default sub-issuer district]: card holder address district / neighbourhood. ex: "Bela Vista"
     * city              [string, default sub-issuer city]: card holder address city. ex: "Rio de Janeiro"
     * stateCode         [string, default sub-issuer state code]: card holder address state. ex: "GO"
     * zipCode           [string, default sub-issuer zip code]: card holder address zip code. ex: "01311-200"
     * id                [string]: unique id returned when IssuingCard is created. ex: "5656565656565656"
     * holderId          [string]: card holder unique id. ex: "5656565656565656"
     * type              [string]: card type. ex: "virtual"
     * status            [string]: current IssuingCard status. ex: "canceled" or "active"
     * number            [string]: [EXPANDABLE] masked card number. Expand to unmask the value. ex: "123".
     * securityCode      [string]: [EXPANDABLE] masked card verification value (cvv). Expand to unmask the value. ex: "123".
     * expiration        [string]: [EXPANDABLE] masked card expiration datetime. Expand to unmask the value. ex: "2020-03-10 10:30:00.000000+00:00"
     * updated           [string]: latest update datetime for the IssuingCard. ex: "2020-03-10 10:30:00.000000+00:00"
     * created           [string]: creation datetime for the IssuingCard. ex: "2020-03-10 10:30:00.000000+00:00"
     */
    static ClassData data = new ClassData(IssuingCard.class, "IssuingCard");

    public String holderName;
    public String holderTaxId;
    public String holderExternalId;
    public String displayName;
    public List<IssuingRule> rules;
    public String binId;
    public String[] tags;
    public String streetLine1;
    public String streetLine2;
    public String district;
    public String city;
    public String stateCode;
    public String zipCode;
    public String holderId;
    public String type;
    public String status;
    public String number;
    public String securityCode;
    public String expiration;
    public String updated;
    public String created;

    /**
     * IssuingCard object
     * <p>
     * The IssuingCard object displays Card's information created in your Workspace.
     * <p>
     * Parameters:
     * @param holderName        [string]: card holder name. ex: "Tony Stark"
     * @param holderTaxId       [string]: card holder tax ID. ex: "012.345.678-90"
     * @param holderExternalId  [string]: card holder unique id, generated by the user to avoid duplicated holders. ex: "my-entity/123"
     * @param displayName       [string, default ""]: card displayed name. ex: "ANTHONY STARK"
     * @param rules             [list of IssuingRule or HashMap, default []]]: [EXPANDABLE] list of card spending rules.
     * @param binId             [string, default ""]: BIN ID to which the card is bound. ex: "53810200"
     * @param tags              [list of strings, default []]: list of strings for tagging. ex: ["travel", "food"]
     * @param streetLine1       [string, default sub-issuer street line 1]: card holder main address. ex: "Av. Paulista, 200"
     * @param streetLine2       [string, default sub-issuer street line 2]: card holder address complement. ex: "Apto. 123"
     * @param district          [string, default sub-issuer district]: card holder address district / neighbourhood. ex: "Bela Vista"
     * @param city              [string, default sub-issuer city]: card holder address city. ex: "Rio de Janeiro"
     * @param stateCode         [string, default sub-issuer state code]: card holder address state. ex: "GO"
     * @param zipCode           [string, default sub-issuer zip code]: card holder address zip code. ex: "01311-200"
     * @param id                [string]: unique id returned when IssuingCard is created. ex: "5656565656565656"
     * @param holderId          [string]: card holder unique id. ex: "5656565656565656"
     * @param type              [string]: card type. ex: "virtual"
     * @param status            [string]: current IssuingCard status. ex: "canceled" or "active"
     * @param number            [string]: [EXPANDABLE] masked card number. Expand to unmask the value. ex: "123".
     * @param securityCode      [string]: [EXPANDABLE] masked card verification value (cvv). Expand to unmask the value. ex: "123".
     * @param expiration        [string]: [EXPANDABLE] masked card expiration datetime. Expand to unmask the value. ex: "2020-03-10 10:30:00.000000+00:00".
     * @param updated           [string]: latest update datetime for the IssuingCard. ex: "2020-03-10 10:30:00.000000+00:00"
     * @param created           [string]: creation datetime for the IssuingCard. ex: "2020-03-10 10:30:00.000000+00:00"
     */
    public IssuingCard(String holderName, String holderTaxId, String holderExternalId, String displayName,
                       List<IssuingRule> rules, String binId, String[] tags, String streetLine1, String streetLine2,
                       String district, String city, String stateCode, String zipCode, String id, String holderId,
                       String type, String status, String number, String securityCode, String expiration,
                       String updated, String created
    ){
        super(id);

        this.holderName = holderName;
        this.holderTaxId = holderTaxId;
        this.holderExternalId = holderExternalId;
        this.displayName = displayName;
        this.rules = rules;
        this.binId = binId;
        this.tags = tags;
        this.streetLine1 = streetLine1;
        this.streetLine2 = streetLine2;
        this.district = district;
        this.city = city;
        this.stateCode = stateCode;
        this.zipCode = zipCode;
        this.holderId = holderId;
        this.type = type;
        this.status = status;
        this.number = number;
        this.securityCode = securityCode;
        this.expiration = expiration;
        this.updated = updated;
        this.created = created;
    }

    /**
     * IssuingCard object
     * <p>
     * The IssuingCard object displays Card's information created in your Workspace.
     * <p>
     * Parameters:
     * holderName string]: card holder name. ex: "Tony Stark"
     * holderTaxId [string]: card holder tax ID. ex: "012.345.678-90"
     * holderExternalId [string]: card holder unique id, generated by the user to avoid duplicated holders. ex: "my-entity/123"
     * <p>
     * Parameters (optional):
     * displayName [string, default ""]: card displayed name. ex: "ANTHONY STARK"
     * rules [list of IssuingRule or HashMap, default []]: [EXPANDABLE] list of card spending rules.
     * binId [string, default ""]: BIN ID to which the card is bound. ex: "53810200"
     * tags [list of strings, default []]: list of strings for tagging. ex: ["travel", "food"]
     * streetLine1 [string, default sub-issuer street line 1]: card holder main address. ex: "Av. Paulista, 200"
     * streetLine2 [string, default sub-issuer street line 2]: card holder address complement. ex: "Apto. 123"
     * district [string, default sub-issuer district]: card holder address district / neighbourhood. ex: "Bela Vista"
     * city [string, default sub-issuer city]: card holder address city. ex: "Rio de Janeiro"
     * stateCode [string, default sub-issuer state code]: card holder address state. ex: "GO"
     * zipCode [string, default sub-issuer zip code]: card holder address zip code. ex: "01311-200"
     * <p>
     * Attributes (return-only):
     * id [string]: unique id returned when IssuingCard is created. ex: "5656565656565656"
     * holderId [string]: card holder unique id. ex: "5656565656565656"
     * type [string]: card type. ex: "virtual"
     * status [string]: current IssuingCard status. ex: "canceled" or "active"
     * number [string]: [EXPANDABLE] masked card number. Expand to unmask the value. ex: "123".
     * securityCode [string]: [EXPANDABLE] masked card verification value (cvv). Expand to unmask the value. ex: "123".
     * expiration [string]: [EXPANDABLE] masked card expiration datetime. Expand to unmask the value. ex: "2020-03-10 10:30:00.000000+00:00".
     * updated [string]: latest update datetime for the IssuingCard. ex: "2020-03-10 10:30:00.000000+00:00"
     * created [string]: creation datetime for the IssuingCard. ex: "2020-03-10 10:30:00.000000+00:00"
     * @throws Exception error in the request
     */
    @SuppressWarnings("unchecked")
    public IssuingCard(Map<String, Object> data) throws Exception {
        super(null);
        HashMap<String, Object> dataCopy = new HashMap<>(data);

        this.tags = (String[]) dataCopy.remove("tags");
        this.holderExternalId = (String) dataCopy.remove("holderExternalId");
        this.holderName = (String) dataCopy.remove("holderName");
        this.holderTaxId = (String) dataCopy.remove("holderTaxId");
        this.displayName = (String) dataCopy.remove("displayName");
        this.rules = IssuingRule.parseRules((List<Object>) dataCopy.remove("rules"));
        this.binId = (String) dataCopy.remove("binId");
        this.streetLine1 = (String) dataCopy.remove("streetLine1");
        this.streetLine2 = (String) dataCopy.remove("streetLine2");
        this.district = (String) dataCopy.remove("district");
        this.city = (String) dataCopy.remove("city");
        this.stateCode = (String) dataCopy.remove("stateCode");
        this.zipCode = (String) dataCopy.remove("zipCode");
        this.holderId = null;
        this.type = null;
        this.status = null;
        this.number = null;
        this.securityCode = null;
        this.expiration = null;
        this.updated = null;
        this.created = null;

        if (!dataCopy.isEmpty()) {
            throw new Exception("Unknown parameters used in constructor: [" + String.join(", ", dataCopy.keySet()) + "]");
        }
    }

    /**
     * Create IssuingCards
     * <p>
     * Send a list of IssuingCard objects for creation in the Stark Infra API
     * <p>
     * Parameters:
     * @param cards [list of IssuingCard objects]: list of IssuingCard objects to be created in the API
     * @param params map of parameters
     * expand [list of strings, default null]: fields to expand information. ex: ["rules", "securityCode", "number", "expiration"]
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
     * Return:
     * @return list of IssuingCard objects with updated attributes
     * @throws Exception error in the request
     */
    @SuppressWarnings("unchecked")
    public static List<IssuingCard> create(List<?> cards, Map<String, Object> params, User user) throws Exception {
        List<IssuingCard> cardList = new ArrayList<>();
        for (Object card : cards){
            if (card instanceof Map){
                cardList.add(new IssuingCard((Map<String, Object>) card));
                continue;
            }
            if (card instanceof IssuingCard){
                cardList.add((IssuingCard) card);
                continue;
            }
            throw new Exception("Unknown type \"" + card.getClass() + "\", use IssuingCard or HashMap");
        }
        return Rest.post(data, cardList, params, user);
    }

    /**
     * Create IssuingCards
     * <p>
     * Send a list of IssuingCard objects for creation in the Stark Infra API
     * <p>
     * Parameters:
     * @param cards [list of IssuingCard objects]: list of IssuingCard objects to be created in the API
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
     * Return:
     * @return list of IssuingCard objects with updated attributes
     * @throws Exception error in the request
     */
    public static List<IssuingCard> create(List<?> cards, User user) throws Exception {
        return IssuingCard.create(cards, null, user);
    }

    /**
     * Create IssuingCards
     * <p>
     * Send a list of IssuingCard objects for creation in the Stark Infra API
     * <p>
     * Parameters:
     * @param cards [list of IssuingCard objects]: list of IssuingCard objects to be created in the API
     * @param params map of parameters
     * expand [list of strings, default null]: fields to expand information. ex: ["rules", "securityCode", "number", "expiration"]
     * Return:
     * @return list of IssuingCard objects with updated attributes
     * @throws Exception error in the request
     */
    public static List<IssuingCard> create(List<?> cards, Map<String, Object> params) throws Exception {
        return IssuingCard.create(cards, params, null);
    }

    /**
     * Create IssuingCards
     * <p>
     * Send a list of IssuingCard objects for creation in the Stark Infra API
     * <p>
     * Parameters:
     * @param cards [list of IssuingCard objects]: list of IssuingCard objects to be created in the API
     * Return:
     * @return list of IssuingCard objects with updated attributes
     * @throws Exception error in the request
     */
    public static List<IssuingCard> create(List<?> cards) throws Exception {
        return IssuingCard.create(cards, null, null);
    }

    /**
     * Retrieve IssuingCards
     * <p>
     * Receive a generator of IssuingCard objects previously registered in the Stark Infra API
     * <p>
     * Parameters:
     * @param params map of parameters
     * status [string, default ""]: filter for status of retrieved objects. ex: "active", "blocked", "expired" or "canceled"
     * types [list of strings, default null]: card type. ex: ["virtual"]
     * holderIds [list of strings, default null]: card holder IDs. ex: ["5656565656565656", "4545454545454545"]
     * after [date string, default null]: date filter for objects created only after specified date. ex: "2022-03-22"
     * before [date string, default null]: date filter for objects created only before specified date. ex: "2022-03-22"
     * tags [list of strings, default null]: tags to filter retrieved objects. ex: ["tony", "stark"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
     * expand [list of strings, default []]: fields to expand information. ex: ["rules", "securityCode", "number", "expiration"]
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
     * <p>
     * Return:
     * @return generator of IssuingCards objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<IssuingCard> query(Map<String, Object> params, User user) throws Exception{
        return Rest.getStream(data, params, user);
    }

    /**
     * Retrieve IssuingCards
     * <p>
     * Receive a generator of IssuingCard objects previously registered in the Stark Infra API
     * <p>
     * Parameters:
     * @param params map of parameters
     * status [string, default ""]: filter for status of retrieved objects. ex: "active", "blocked", "expired" or "canceled"
     * types [list of strings, default null]: card type. ex: ["virtual"]
     * holderIds [list of strings, default null]: card holder IDs. ex: ["5656565656565656", "4545454545454545"]
     * after [date string, default null]: date filter for objects created only after specified date. ex: "2022-03-22"
     * before [date string, default null]: date filter for objects created only before specified date. ex: "2022-03-22"
     * tags [list of strings, default null]: tags to filter retrieved objects. ex: ["tony", "stark"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
     * expand [list of strings, default []]: fields to expand information. ex: ["rules", "securityCode", "number", "expiration"]
     * <p>
     * Return:
     * @return generator of IssuingCards objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<IssuingCard> query(Map<String, Object> params) throws Exception{
        return Rest.getStream(data, params, null);
    }

    /**
     * Retrieve IssuingCards
     * <p>
     * Receive a generator of IssuingCard objects previously registered in the Stark Infra API
     * <p>
     * Parameters:
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
     * <p>
     * Return:
     * @return generator of IssuingCards objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<IssuingCard> query(User user) throws Exception{
        return Rest.getStream(data,  new HashMap<>(), user);
    }


    /**
     * Retrieve IssuingCards
     * <p>
     * Receive a generator of IssuingCard objects previously registered in the Stark Infra API
     * <p>
     * Return:
     * @return generator of IssuingCards objects with updated attributes
     * @throws Exception error in the request
     */
    public static Generator<IssuingCard> query() throws Exception{
        return Rest.getStream(data, new HashMap<>(), null);
    }

    public final static class Page {
        public List<IssuingCard> cards;
        public String cursor;

        public Page(List<IssuingCard> cards, String cursor) {
            this.cards = cards;
            this.cursor = cursor;
        }
    }

    /**
     * Retrieve paged IssuingCards
     * <p>
     * Receive a list of up to 100 IssuingCard objects previously registered in the Stark Infra API and the cursor to the next page.
     * <p>
     * Parameters:
     * @param params map of parameters
     * cursor [string, default null]: cursor returned on the previous page function call
     * status [string, default ""]: filter for status of retrieved objects. ex: "active", "blocked", "expired" or "canceled"
     * types [list of strings, default null]: card type. ex: ["virtual"]
     * holderIds [list of strings, default null]: card holder IDs. ex: ["5656565656565656", "4545454545454545"]
     * after [date string, default null]: date filter for objects created only after specified date. ex: "2022-03-22"
     * before [date string, default null]: date filter for objects created only before specified date. ex: "2022-03-22"
     * tags [list of strings, default null]: tags to filter retrieved objects. ex: ["tony", "stark"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
     * expand [list of strings, default []]: fields to expand information. ex: ["rules", "securityCode", "number", "expiration"]
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
     * <p>
     * Return:
     * @return IssuingCard.Page object:
     * IssuingCard.Page.cards: list of IssuingCard objects with updated attributes
     * IssuingCard.Page.cursor: cursor to retrieve the next page of IssuingCard objects
     * @throws Exception error in the request
     */
    public static Page page(Map<String , Object> params, User user) throws Exception {
        com.starkinfra.utils.Page page = Rest.getPage(data, params, user);
        List<IssuingCard> cards = new ArrayList<>();
        for (SubResource card: page.entities) {
            cards.add((IssuingCard) card);
        }
        return new Page(cards, page.cursor);
    }

    /**
     * Retrieve paged IssuingCards
     * <p>
     * Receive a list of up to 100 IssuingCard objects previously registered in the Stark Infra API and the cursor to the next page.
     * <p>
     * Parameters:
     * @param params map of parameters
     * cursor [string, default null]: cursor returned on the previous page function call
     * status [string, default ""]: filter for status of retrieved objects. ex: "active", "blocked", "expired" or "canceled"
     * types [list of strings, default null]: card type. ex: ["virtual"]
     * holderIds [list of strings, default null]: card holder IDs. ex: ["5656565656565656", "4545454545454545"]
     * after [date string, default null]: date filter for objects created only after specified date. ex: "2022-03-22"
     * before [date string, default null]: date filter for objects created only before specified date. ex: "2022-03-22"
     * tags [list of strings, default null]: tags to filter retrieved objects. ex: ["tony", "stark"]
     * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
     * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
     * expand [list of strings, default []]: fields to expand information. ex: ["rules", "securityCode", "number", "expiration"]
     * <p>
     * Return:
     * @return IssuingCard.Page object:
     * IssuingCard.Page.cards: list of IssuingCard objects with updated attributes
     * IssuingCard.Page.cursor: cursor to retrieve the next page of IssuingCard objects
     * @throws Exception error in the request
     */
    public static Page page(Map<String , Object> params) throws Exception {
        return page(params, null);
    }

    /**
     * Retrieve paged IssuingCards
     * <p>
     * Receive a list of up to 100 IssuingCard objects previously registered in the Stark Infra API and the cursor to the next page.
     * <p>
     * Parameters:
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
     * <p>
     * Return:
     * @return IssuingCard.Page object:
     * IssuingCard.Page.cards: list of IssuingCard objects with updated attributes
     * IssuingCard.Page.cursor: cursor to retrieve the next page of IssuingCard objects
     * @throws Exception error in the request
     */
    public static Page page(User user) throws Exception {
        return page(new HashMap<>(), user);
    }

    /**
     * Retrieve paged IssuingCards
     * <p>
     * Receive a list of up to 100 IssuingCard objects previously registered in the Stark Infra API and the cursor to the next page.
     * <p>
     * Return:
     * @return IssuingCard.Page object:
     * IssuingCard.Page.cards: list of IssuingCard objects with updated attributes
     * IssuingCard.Page.cursor: cursor to retrieve the next page of IssuingCard objects
     * @throws Exception error in the request
     */
    public static Page page() throws Exception {
        return page(new HashMap<>(), null);
    }

    /**
     * Retrieve a specific IssuingCard
     * <p>
     * Receive a single IssuingCard object previously created in the Stark Infra API by its id
     * <p>
     * Parameters:
     * @param id [string]: object unique id. ex: "5656565656565656"
     * @param params map of parameters
     * expand [list of strings, default null]: fields to expand information. ex: ["rules"]
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
     * <p>
     * Return:
     * @return IssuingCard object with updated attributes
     * @throws Exception error in the request
     */
    public static IssuingCard get(String id, Map<String, Object> params, User user) throws Exception{
        return Rest.getId(data, id, params, user);
    }

    /**
     * Retrieve a specific IssuingCard
     * <p>
     * Receive a single IssuingCard object previously created in the Stark Infra API by its id
     * <p>
     * Parameters:
     * @param id [string]: object unique id. ex: "5656565656565656"
     * @param params map of parameters
     * expand [list of strings, default null]: fields to expand information. ex: ["rules"]
     * <p>
     * Return:
     * @return IssuingCard object with updated attributes
     * @throws Exception error in the request
     */
    public static IssuingCard get(String id, Map<String, Object> params) throws Exception{
        return IssuingCard.get(id, params, null);
    }

    /**
     * Retrieve a specific IssuingCard
     * <p>
     * Receive a single IssuingCard object previously created in the Stark Infra API by its id
     * <p>
     * Parameters:
     * @param id [string]: object unique id. ex: "5656565656565656"
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
     * <p>
     * Return:
     * @return IssuingCard object with updated attributes
     * @throws Exception error in the request
     */
    public static IssuingCard get(String id, User user) throws Exception{
        return IssuingCard.get(id, null, user);
    }

    /**
     * Retrieve a specific IssuingCard
     * <p>
     * Receive a single IssuingCard object previously created in the Stark Infra API by its id
     * <p>
     * Parameters:
     * @param id [string]: object unique id. ex: "5656565656565656"
     * <p>
     * Return:
     * @return IssuingCard object with updated attributes
     * @throws Exception error in the request
     */
    public static IssuingCard get(String id) throws Exception{
        return IssuingCard.get( id, null, null);
    }

    /**
     * Update IssuingCard entity
     * <p>
     * Update an IssuingCard by passing id.
     * <p>
     * Parameters:
     * @param id [string]: IssuingCard id. ex: "5656565656565656"
     * @param patchData map of parameters
     * status [string]: You may block the IssuingCard by passing 'blocked' in the status
     * displayName [string, default ""]: card displayed name
     * rules [list of IssuingRule or HashMap, default null]: list of new IssuingRules. If the rule id isn't set, a new rule will be created.
     * tags [list of strings, default null]: list of strings for tagging
     * user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
     * <p>
     * Return:
     * @return IssuingCard object with updated attributes
     * @throws Exception error in the request
     */
    public static IssuingCard update(String id, Map<String, Object> patchData) throws Exception {
        return IssuingCard.update(id, patchData, null);
    }

    /**
     * Update IssuingCard entity
     * <p>
     * Update an IssuingCard by passing id.
     * <p>
     * Parameters:
     * @param id [string]: IssuingCard id. ex: "5656565656565656"
     * @param patchData map of parameters
     * status [string]: You may block the IssuingCard by passing 'blocked' in the status
     * displayName [string, default null]: card displayed name
     * rules [list of IssuingRule or HashMap, default null]: list of new IssuingRules. If the rule id isn't set, a new rule will be created.
     * tags [list of strings, default null]: list of strings for tagging
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
     * <p>
     * Return:
     * @return IssuingCard object with updated attributes
     * @throws Exception error in the request
     */
    public static IssuingCard update(String id, Map<String, Object> patchData, User user) throws Exception {
        return Rest.patch(data, id, patchData, user);
    }

    /**
     * Cancel an IssuingCard entity
     * <p>
     * Cancel an IssuingCard entity previously created in the Stark Infra API
     * <p>
     * Parameters:
     * @param id [string]: IssuingCard unique id. ex: "5656565656565656"
     * <p>
     * Return:
     * @return canceled IssuingCard object
     * @throws Exception error in the request
     */
    public static IssuingCard cancel(String id) throws Exception {
        return IssuingCard.cancel(id, null);
    }

    /**
     * Cancel an IssuingCard entity
     * <p>
     * Cancel an IssuingCard entity previously created in the Stark Infra API
     * <p>
     * Parameters:
     * @param id [string]: IssuingCard unique id. ex: "5656565656565656"
     * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
     * <p>
     * Return:
     * @return canceled IssuingCard object
     * @throws Exception error in the request
     */
    public static IssuingCard cancel(String id, User user) throws Exception {
        return Rest.delete(data, id, user);
    }

    public final static class Log extends Resource {
        static ClassData data = new ClassData(IssuingCard.Log.class, "IssuingCardLog");

        public String created;
        public String type;
        public IssuingCard card;

        /**
         * IssuingCard Log object
         * <p>
         * Every time an IssuingCard entity is modified, a corresponding IssuingCard Log
         * is generated for the entity. This log is never generated by the
         * user.
         * <p>
         * Attributes:
         * @param id [string]: unique id returned when the log is created. ex: "5656565656565656"
         * @param card [IssuingCard]: IssuingCard entity to which the log refers to.
         * @param type [string]: type of the IssuingCard event which triggered the log creation. ex: "processing" or "success"
         * @param created [string]: creation datetime for the log. ex: "2020-03-10 10:30:00.000000+00:00"
         */
        public Log(String created, String type, IssuingCard card, String id) {
            super(id);
            this.card = card;
            this.type = type;
            this.created = created;
        }

        /**
         * Retrieve a specific IssuingCard Log
         * <p>
         * Receive a single IssuingCard Log object previously created by the Stark Infra API by passing its id
         * <p>
         * Parameters:
         * @param id [string]: object unique id. ex: "5656565656565656"
         * <p>
         * Return:
         * @return IssuingCard Log object with updated attributes
         * @throws Exception error in the card
         */
        public static IssuingCard.Log get(String id) throws Exception {
            return IssuingCard.Log.get(id, null);
        }

        /**
         * Retrieve a specific IssuingCard Log
         * <p>
         * Receive a single IssuingCard Log object previously created by the Stark Infra API by passing its id
         * <p>
         * Parameters:
         * @param id [string]: object unique id. ex: "5656565656565656"
         * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
         * <p>
         * Return:
         * @return IssuingCard Log object with updated attributes
         * @throws Exception error in the card
         */
        public static IssuingCard.Log get(String id, User user) throws Exception {
            return Rest.getId(data, id, user);
        }

        /**
         * Retrieve IssuingCard Logs
         * <p>
         * Receive a generator of IssuingCard.Log objects previously created in the Stark Infra API.
         * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
         * <p>
         * Parameters:
         * @param params map of parameters
         * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
         * after [string, default null] date filter for objects created only after specified date. ex: "2020-03-10"
         * before [string, default null] date filter for objects created only before specified date. ex: "2020-03-10"
         * types [list of strings, default null]: filter retrieved objects by types. ex: "success" or "failed"
         * cardIds [list of strings, default null]: list of IssuingCard ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * <p>
         * Return:
         * @return generator of IssuingCard Log objects with updated attributes
         * @throws Exception error in the card
         */
        public static Generator<IssuingCard.Log> query(Map<String, Object> params) throws Exception {
            return IssuingCard.Log.query(params, null);
        }

        /**
         * Retrieve IssuingCard Logs
         * <p>
         * Receive a generator of IssuingCard.Log objects previously created in the Stark Infra API.
         * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
         * <p>
         * Parameters:
         * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
         * <p>
         * Return:
         * @return generator of IssuingCard Log objects with updated attributes
         * @throws Exception error in the card
         */
        public static Generator<IssuingCard.Log> query(User user) throws Exception {
            return IssuingCard.Log.query(new HashMap<>(), user);
        }

        /**
         * Retrieve IssuingCard Logs
         * <p>
         * Receive a generator of IssuingCard.Log objects previously created in the Stark Infra API.
         * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
         * <p>
         * Return:
         * @return generator of IssuingCard Log objects with updated attributes
         * @throws Exception error in the card
         */
        public static Generator<IssuingCard.Log> query() throws Exception {
            return IssuingCard.Log.query(new HashMap<>(), null);
        }

        /**
         * Retrieve IssuingCard Logs
         * <p>
         * Receive a generator of IssuingCard.Log objects previously created in the Stark Infra API.
         * Use this function instead of page if you want to stream the objects without worrying about cursors and pagination.
         * <p>
         * Parameters:
         * @param params parameters of the query
         * limit [integer, default null]: maximum number of objects to be retrieved. Unlimited if null. ex: 35
         * after [string, default null] date filter for objects created only after specified date. ex: "2020-03-10"
         * before [string, default null] date filter for objects created only before specified date. ex: "2020-03-10"
         * types [list of strings, default null]: filter retrieved objects by types. ex: "success" or "failed"
         * cardIds [list of strings, default null]: list of IssuingCard ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
         * <p>
         * Return:
         * @return generator of IssuingCard Log objects with updated attributes
         * @throws Exception error in the card
         */
        public static Generator<IssuingCard.Log> query(Map<String, Object> params, User user) throws Exception {
            return Rest.getStream(data, params, user);
        }

        public final static class Page {
            public List<IssuingCard.Log> logs;
            public String cursor;

            public Page(List<IssuingCard.Log> logs, String cursor) {
                this.logs = logs;
                this.cursor = cursor;
            }
        }

        /**
         * Retrieve paged IssuingCard.Logs
         * <p>
         * Receive a list of up to 100 IssuingCard.Log objects previously created in the Stark Infra API and the cursor to the next page.
         * Use this function instead of query if you want to manually page your cards.
         * <p>
         * Parameters:
         * @param params parameters of the query
         * cursor [string, default null]: cursor returned on the previous page function call
         * limit [integer, default 100]: maximum number of objects to be retrieved. It must be an integer between 1 and 100. ex: 50
         * after [string, default null] date filter for objects created only after specified date. ex: "2020-03-10"
         * before [string, default null] date filter for objects created only before specified date. ex: "2020-03-10"
         * types [list of strings, default null]: filter retrieved objects by types. ex: "success" or "failed"
         * cardIds [list of strings, default null]: list of IssuingCard ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * <p>
         * Return:
         * @return IssuingCard.Log.Page object:
         * IssuingCard.Log.Page.logs: list of IssuingCard.Log objects with updated attributes
         * IssuingCard.Log.Page.cursor: cursor to retrieve the next page of IssuingCard.Log objects
         * @throws Exception error in the card
         */
        public static IssuingCard.Log.Page page(Map<String, Object> params) throws Exception {
            return IssuingCard.Log.page(params, null);
        }

        /**
         * Retrieve paged IssuingCard.Logs
         * <p>
         * Receive a list of up to 100 IssuingCard.Log objects previously created in the Stark Infra API and the cursor to the next page.
         * Use this function instead of query if you want to manually page your cards.
         * <p>
         * Parameters:
         * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
         * <p>
         * Return:
         * @return IssuingCard.Log.Page object:
         * IssuingCard.Log.Page.logs: list of IssuingCard.Log objects with updated attributes
         * IssuingCard.Log.Page.cursor: cursor to retrieve the next page of IssuingCard.Log objects
         * @throws Exception error in the card
         */
        public static IssuingCard.Log.Page page(User user) throws Exception {
            return IssuingCard.Log.page(new HashMap<>(), user);
        }

        /**
         * Retrieve paged IssuingCard.Logs
         * <p>
         * Receive a list of up to 100 IssuingCard.Log objects previously created in the Stark Infra API and the cursor to the next page.
         * Use this function instead of query if you want to manually page your cards.
         * <p>
         * Return:
         * @return IssuingCard.Log.Page object:
         * IssuingCard.Log.Page.logs: list of IssuingCard.Log objects with updated attributes
         * IssuingCard.Log.Page.cursor: cursor to retrieve the next page of IssuingCard.Log objects
         * @throws Exception error in the card
         */
        public static IssuingCard.Log.Page page() throws Exception {
            return IssuingCard.Log.page(new HashMap<>(), null);
        }

        /**
         * Retrieve paged IssuingCard.Logs
         * <p>
         * Receive a list of up to 100 IssuingCard.Log objects previously created in the Stark Infra API and the cursor to the next page.
         * Use this function instead of query if you want to manually page your cards.
         * <p>
         * Parameters:
         * @param params parameters of the query
         * cursor [string, default null]: cursor returned on the previous page function call
         * limit [integer, default 100]: maximum number of objects to be retrieved. It must be an integer between 1 and 100. ex: 50
         * after [string, default null] date filter for objects created only after specified date. ex: "2020-03-10"
         * before [string, default null] date filter for objects created only before specified date. ex: "2020-03-10"
         * types [list of strings, default null]: filter retrieved objects by types. ex: "success" or "failed"
         * cardIds [list of strings, default null]: list of IssuingCard ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * ids [list of strings, default null]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
         * @param user [Organization/Project object, default null]: Organization or Project object. Not necessary if starkinfra.Settings.user was set before function call
         * <p>
         * Return:
         * @return IssuingCard.Log.Page object:
         * IssuingCard.Log.Page.logs: list of IssuingCard.Log objects with updated attributes
         * IssuingCard.Log.Page.cursor: cursor to retrieve the next page of IssuingCard.Log objects
         * @throws Exception error in the card
         */
        public static IssuingCard.Log.Page page(Map<String, Object> params, User user) throws Exception {
            com.starkinfra.utils.Page page = Rest.getPage(data, params, user);
            List<IssuingCard.Log> logs = new ArrayList<>();
            for (SubResource log: page.entities) {
                logs.add((IssuingCard.Log) log);
            }
            return new Page(logs, page.cursor);
        }
    }
}
